import type { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import { getAuthSession } from "server/common/get-server-session";
import { Session } from "next-auth";
import { trpc } from "utils/trpc";
import { IconButton, Modal, Navbar, TransactionContainer, TransactionSkeleton } from "components";
import { FiGithub, FiInstagram, FiPlusCircle } from "react-icons/fi";
import { useSession } from "next-auth/react";
import React, { useCallback, useState } from "react";
import { TransactionLog } from "@prisma/client";
import ScrollableContainer from "components/ScrollableContainer";
import AddNewForm from "components/form/AddNewForm";
import { useAutoAnimate } from "@formkit/auto-animate/react";
import EditForm from "components/form/EditForm";
import { CustomButton } from "components/form";

export const getServerSideProps: GetServerSideProps = async (ctx) => {
	const session = await getAuthSession(ctx);

	if (!session?.user) {
		return {
			redirect: {
				destination: "/auth/login",
				statusCode: 302,
			},
		};
	}

	return {
		props: { ...session.user },
	};
};

type PageProps = {
	user: Session["user"];
};

const Home: NextPage<PageProps> = (props) => {
	const { data: transactions, status: dataStatus, refetch } = trpc.useQuery(["transaction.list"]);
	const { status } = useSession();
	const [openAddTransactionModal, setOpenAddTransactionModal] = useState(false);
	const [openEditTransactionModal, setOpenEditTransactionModal] = useState(false);
	const [selectedTransaction, setSelectedTransaction] = useState<TransactionLog | null>(null);
	const [parent] = useAutoAnimate<HTMLDivElement>();

	const getTransactionGroupedByDate = useCallback(
		() =>
			transactions?.reduce((acc, transaction) => {
				const date = transaction.date ?? new Date();
				const dateString = new Intl.DateTimeFormat("en-SG", {
					dateStyle: "medium",
				}).format(date);
				acc.set(dateString, [...(acc.get(dateString) ?? []), transaction]);
				return acc;
			}, new Map<string, TransactionLog[]>()),
		[transactions]
	);

	return (
		<>
			<Head>
				<title>Home | Duit Mana?</title>
				<meta name="description" content="Generated by create-t3-app" />
				<link rel="icon" href="/images/icon.png" />
			</Head>

			<main className="bg-radial from-primary to-secondary min-h-screen">
				<Modal open={openEditTransactionModal} onClose={() => setOpenEditTransactionModal(false)}>
					<EditForm
						className="bg-secondary bg-opacity-75 border-white border shadow-md"
						onSubmit={() => {
							refetch();
							setOpenEditTransactionModal(false);
						}}
						transaction={selectedTransaction}
					/>
				</Modal>
				<Modal open={openAddTransactionModal} onClose={() => setOpenAddTransactionModal(false)}>
					<AddNewForm
						className="bg-secondary bg-opacity-75 border-white border shadow-md"
						onSubmit={() => {
							refetch();
							setOpenAddTransactionModal(false);
						}}
					/>
				</Modal>
				<Navbar />
				<div className="animate-pulse bg-radial from-[#fff2002c] to-[#ffffff00] w-full h-screen absolute pointer-events-none" />
				<div className="container mx-auto flex flex-col items-center justify-center h-screen p-4">
					<div className="flex-1 flex flex-col justify-center items-center w-full max-w-md">
						{dataStatus === "loading" || status === "loading" ? (
							<>
								<TransactionSkeleton />
								<TransactionSkeleton />
								<TransactionSkeleton />
							</>
						) : !transactions || transactions.length <= 0 ? (
							<>
								<div className="animate-pulse">
									<Image src="/images/question-mark.png" alt="Duit Mana?" width={200} height={200} />
								</div>
								<h1 className="text-2xl font-semibold text-white text-center pb-4 pt-2">Duit Mana?</h1>
							</>
						) : (
							<ScrollableContainer className="flex flex-col w-full max-w-md h-[50vh]" ref={parent}>
								{Array.from(getTransactionGroupedByDate() ?? []).map(([date, transactions]) => {
									return (
										<div key={date} className="flex flex-col justify-center w-full">
											<h2 className="text-2xl font-semibold text-white text-left pb-4 pt-2">{date}</h2>
											<div className="flex flex-col items-center justify-center w-full" ref={parent}>
												{transactions.map((transaction, i) => (
													<TransactionContainer
														key={i}
														transaction={transaction}
														refetch={refetch}
														onSelect={() => {
															if (transaction.id === selectedTransaction?.id) {
																setSelectedTransaction(null);
															} else {
																setSelectedTransaction(transaction);
															}
														}}
														onDismiss={() => {
															setSelectedTransaction(null);
														}}
														onEditClicked={(transaction) => {
															setSelectedTransaction(transaction);
															setOpenEditTransactionModal(true);
														}}
														selected={transaction.id === selectedTransaction?.id}
													/>
												))}
											</div>
										</div>
									);
								})}
							</ScrollableContainer>
						)}
						<CustomButton
							className="w-full mt-4"
							variant="outlined"
							startIcon={<FiPlusCircle className="w-4 h-4" />}
							label="Add Transaction"
							onClick={() => setOpenAddTransactionModal(true)}
							color="white"
						/>
					</div>
					<div className="flex flex-col justify-center items-center">
						<div className="flex mb-1 justify-center w-full">
							<a href="https://github.com/akasmirhan4/duit-mana-app" target="_blank" rel="noopener noreferrer">
								<IconButton variant="outlined" className="mx-1">
									<FiGithub />
								</IconButton>
							</a>
							<a href="https://www.instagram.com/akasmirhan/" target="_blank" rel="noopener noreferrer">
								<IconButton variant="outlined" className="mx-1">
									<FiInstagram />
								</IconButton>
							</a>
						</div>
						<h3 className="text-[#E6BBFF] text-center mt-1">Designed by akasmirhan4</h3>
					</div>
				</div>
			</main>
		</>
	);
};

export default Home;
